server.port=8003
server.tomcat.max-threads=1000
server.tomcat.min-spare-threads=500
server.tomcat.accept-count=1000
## 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
## 不要设置过大，如果过大，启动项目会报错：打开文件数过多
#server.undertow.io-threads=4
## 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
## 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
#server.undertow.worker-threads=32
## 是否分配的直接内存(NIO直接分配的堆外内存)
#server.undertow.direct-buffers=true

spring.application.name=spring-boot-rabbitmq

#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=spring_bus
#spring.rabbitmq.password=123456
#spring.rabbitmq.publisher-confirms=true
#spring.rabbitmq.publisher-returns=true
#spring.rabbitmq.template.mandatory=true

spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.username=admin
spring.data.mongodb.password=aDmin123
spring.data.mongodb.database=test_db
spring.data.mongodb.authentication-database=admin

# Redis数据库索引（默认为0）
#spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379 
# Redis服务器连接密码（默认为空）
spring.redis.password=aDmin123
##连接池最大连接数（使用负值表示没有限制）
#spring.redis.jedis.pool.max-active=
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.jedis.pool.max-wait=
## 连接池中的最大空闲连接
#spring.redis.jedis.pool.max-idle=
## 连接池中的最小空闲连接
#spring.redis.jedis.pool.min-idle=
## 连接超时时间（毫秒）
#spring.redis.timeout=0
#spring.redis.sentinel.master=
#spring.redis.sentinel.nodes=

#spring.kafka.bootstrap-servers=http://127.0.0.1:9092
#spring.kafka.consumer.group-id=MyTest
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.auto-commit-interval=100
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.producer.batch-size=
#spring.kafka.producer.buffer-memory=
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

logging.level.org.springframework.web=DEBUG